"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const wireEncoder_1 = require("./wireEncoder");
const wireDecoder_1 = __importDefault(require("./wireDecoder"));
const constants_1 = require("./constants");
const api_1 = __importDefault(require("./api"));
const cache_1 = __importDefault(require("./cache"));
const errors_1 = require("./errors");
const _types_1 = require("./@types");
const schemaTypeResolver_1 = require("./schemaTypeResolver");
const DEFAULT_OPTS = {
    compatibility: constants_1.COMPATIBILITY.BACKWARD,
    separator: constants_1.DEFAULT_SEPERATOR,
};
class SchemaRegistry {
    constructor({ auth, clientId, host, retry, agent }, options) {
        this.cacheMissRequests = {};
        this.api = api_1.default({ auth, clientId, host, retry, agent });
        this.cache = new cache_1.default();
        this.options = options;
    }
    isConfluentSchema(schema) {
        return schema.schema != null;
    }
    getConfluentSchema(schema) {
        let confluentSchema;
        // convert data from old api (for backwards compatibility)
        if (!this.isConfluentSchema(schema)) {
            // schema is instanceof RawAvroSchema or AvroSchema
            confluentSchema = {
                type: _types_1.SchemaType.AVRO,
                schema: JSON.stringify(schema),
            };
        }
        else {
            confluentSchema = schema;
        }
        return confluentSchema;
    }
    async register(schema, userOpts) {
        const { compatibility, separator } = { ...DEFAULT_OPTS, ...userOpts };
        const confluentSchema = this.getConfluentSchema(schema);
        const helper = schemaTypeResolver_1.helperTypeFromSchemaType(confluentSchema.type);
        const schemaInstance = schemaTypeResolver_1.schemaFromConfluentSchema(confluentSchema, this.options);
        helper.validate(schemaInstance);
        let subject;
        if (userOpts === null || userOpts === void 0 ? void 0 : userOpts.subject) {
            subject = {
                name: userOpts.subject,
            };
        }
        else {
            subject = helper.getSubject(confluentSchema, schemaInstance, separator);
        }
        try {
            const response = await this.api.Subject.config({ subject: subject.name });
            const { compatibilityLevel } = response.data();
            if (compatibilityLevel.toUpperCase() !== compatibility) {
                throw new errors_1.ConfluentSchemaRegistryCompatibilityError(`Compatibility does not match the configuration (${compatibility} != ${compatibilityLevel.toUpperCase()})`);
            }
        }
        catch (error) {
            if (error.status !== 404) {
                throw error;
            }
            if (compatibility) {
                await this.api.Subject.updateConfig({ subject: subject.name, body: { compatibility } });
            }
        }
        const response = await this.api.Subject.register({
            subject: subject.name,
            body: {
                schemaType: confluentSchema.type,
                schema: confluentSchema.schema,
            },
        });
        const registeredSchema = response.data();
        this.cache.setLatestRegistryId(subject.name, registeredSchema.id);
        this.cache.setSchema(registeredSchema.id, schemaInstance);
        return registeredSchema;
    }
    async getSchema(registryId) {
        const schema = this.cache.getSchema(registryId);
        if (schema) {
            return schema;
        }
        const response = await this.getSchemaOriginRequest(registryId);
        const foundSchema = response.data();
        const rawSchema = foundSchema.schema;
        const schemaType = schemaTypeResolver_1.schemaTypeFromString(foundSchema.schemaType);
        if (schemaType === _types_1.SchemaType.UNKNOWN) {
            throw new errors_1.ConfluentSchemaRegistryError(`Unknown schema type ${foundSchema.schemaType}`);
        }
        const confluentSchema = {
            type: schemaType,
            schema: rawSchema,
        };
        const schemaInstance = schemaTypeResolver_1.schemaFromConfluentSchema(confluentSchema, this.options);
        return this.cache.setSchema(registryId, schemaInstance);
    }
    async encode(registryId, payload) {
        if (!registryId) {
            throw new errors_1.ConfluentSchemaRegistryArgumentError(`Invalid registryId: ${JSON.stringify(registryId)}`);
        }
        const schema = await this.getSchema(registryId);
        try {
            const serializedPayload = schema.toBuffer(payload);
            return wireEncoder_1.encode(registryId, serializedPayload);
        }
        catch (error) {
            if (error instanceof errors_1.ConfluentSchemaRegistryValidationError)
                throw error;
            const paths = this.collectInvalidPaths(schema, payload);
            throw new errors_1.ConfluentSchemaRegistryValidationError(error, paths);
        }
    }
    collectInvalidPaths(schema, jsonPayload) {
        const paths = [];
        schema.isValid(jsonPayload, {
            errorHook: path => paths.push(path),
        });
        return paths;
    }
    async decode(buffer) {
        if (!Buffer.isBuffer(buffer)) {
            throw new errors_1.ConfluentSchemaRegistryArgumentError('Invalid buffer');
        }
        const { magicByte, registryId, payload } = wireDecoder_1.default(buffer);
        if (Buffer.compare(wireEncoder_1.MAGIC_BYTE, magicByte) !== 0) {
            throw new errors_1.ConfluentSchemaRegistryArgumentError(`Message encoded with magic byte ${JSON.stringify(magicByte)}, expected ${JSON.stringify(wireEncoder_1.MAGIC_BYTE)}`);
        }
        const schema = await this.getSchema(registryId);
        return schema.fromBuffer(payload);
    }
    async getRegistryId(subject, version) {
        const response = await this.api.Subject.version({ subject, version });
        const { id } = response.data();
        return id;
    }
    async getRegistryIdBySchema(subject, schema) {
        try {
            const confluentSchema = this.getConfluentSchema(schema);
            const response = await this.api.Subject.registered({
                subject,
                body: {
                    schemaType: confluentSchema.type,
                    schema: confluentSchema.schema,
                },
            });
            const { id } = response.data();
            return id;
        }
        catch (error) {
            if (error.status && error.status === 404) {
                throw new errors_1.ConfluentSchemaRegistryError(error);
            }
            throw error;
        }
    }
    async getLatestSchemaId(subject) {
        const response = await this.api.Subject.latestVersion({ subject });
        const { id } = response.data();
        return id;
    }
    getSchemaOriginRequest(registryId) {
        // ensure that cache-misses result in a single origin request
        if (this.cacheMissRequests[registryId]) {
            return this.cacheMissRequests[registryId];
        }
        else {
            const request = this.api.Schema.find({ id: registryId }).finally(() => {
                delete this.cacheMissRequests[registryId];
            });
            this.cacheMissRequests[registryId] = request;
            return request;
        }
    }
}
exports.default = SchemaRegistry;
//# sourceMappingURL=SchemaRegistry.js.map